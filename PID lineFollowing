#include <Smartcar.h>
Car car;
Odometer encoderLeft, encoderRight;
Gyroscope gyro;
const int MOTOR_MAX_SPEED=50;
const int MOTOR_BASE_SPEED=35;
float Kp=10,Kd=80;
float currError=0;
float correction=0;
float lastError=0;
float leftin=0,rightin=0,leftout=0,rightout=0;
void setup() {
  encoderLeft.attach(2);
  encoderRight.attach(3);
  encoderLeft.begin();
  encoderRight.begin();
  gyro.begin();
  car.begin(encoderLeft, encoderRight, gyro);
}

void loop() {
  currError = Error();
  float correction =  Kp * currError + Kd * (currError - lastError);
  lastError = currError;
  float rightMotorSpeed = MOTOR_BASE_SPEED + correction;
  float leftMotorSpeed = MOTOR_BASE_SPEED - correction;
  if (rightMotorSpeed > MOTOR_MAX_SPEED ) rightMotorSpeed = MOTOR_MAX_SPEED; // prevent the motor from going beyond max speed
  if (leftMotorSpeed > MOTOR_MAX_SPEED ) leftMotorSpeed = MOTOR_MAX_SPEED; // prevent the motor from going beyond max speed
  if(rightMotorSpeed<0) rightMotorSpeed=0;
  if(leftMotorSpeed<0)leftMotorSpeed=0;
  car.setMotorSpeed(leftMotorSpeed,rightMotorSpeed); 
  delay(6); 
}
float Error(){
  float a=analogRead(A11),b=analogRead(A8),c=analogRead(A9),d=analogRead(A10), e=analogRead(A12);
  if(a>b && a>c && a>d && a>e)
  return leftout=(leftout +2.7);
  
  if(b>a && b>c && b>d && b>e){
  return 0;//reset all
  leftin=0,rightin=0,leftout=0,rightout=0;
  }
  if(c>a && c>b && c>d && c>e)
  return rightin=rightin-1.5;
  if(d>a && d>b && d>c && d>e)
  return rightout=(rightout -2.7);
  return leftin+=1.5;
}

